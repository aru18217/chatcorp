import React, { useContext, useEffect, useRef, useState } from "react";
import { Button, Col, Form, Row, Dropdown, DropdownButton } from "react-bootstrap";
import { useSelector } from "react-redux";
import { AppContext } from "../context/appContext";
import "./MessageForm.css";
import Picker from "emoji-picker-react";
import FileBase from "react-file-base64";

function MessageForm() {
    const [message, setMessage] = useState("");
    const [showEmojiPicker, setShowEmojiPicker] = useState(false);
    const user = useSelector((state) => state.user);
    const { socket, currentRoom, setMessages, messages, privateMemberMsg } = useContext(AppContext);
    const messageEndRef = useRef(null);

    useEffect(() => {
        scrollToBottom();
    }, [messages]);

    function getFormattedDate() {
        const date = new Date();
        const year = date.getFullYear();
        let month = (1 + date.getMonth()).toString();
        month = month.length > 1 ? month : "0" + month;
        let day = date.getDate().toString();
        day = day.length > 1 ? day : "0" + day;
        return month + "/" + day + "/" + year;
    }

    function handleSubmit(e) {
        e.preventDefault();
        if (!message) return;
        const today = new Date();
        const minutes = today.getMinutes() < 10 ? "0" + today.getMinutes() : today.getMinutes();
        const time = today.getHours() + ":" + minutes;
        const roomId = currentRoom;
        socket.emit("message-room", roomId, message, user, time, todayDate);
        setMessage("");
    }

    function handleFileUpload(file) {
        const today = new Date();
        const minutes = today.getMinutes() < 10 ? "0" + today.getMinutes() : today.getMinutes();
        const time = today.getHours() + ":" + minutes;
        const roomId = currentRoom;
        const fileMessage = {
            content: file.base64,
            type: file.type,
            user,
            time,
            todayDate,
        };
        socket.emit("file-room", roomId, fileMessage);
    }

    function scrollToBottom() {
        messageEndRef.current?.scrollIntoView({ behavior: "smooth" });
    }

    function handleEmojiClick(event, emojiObject) {
        setMessage((prev) => prev + emojiObject.emoji);
        setShowEmojiPicker(false);
    }

    const todayDate = getFormattedDate();

    socket.off("room-messages").on("room-messages", (roomMessages) => {
        setMessages(roomMessages);
    });

    return (
        <>
            <div className="messages-output">
                {user && !privateMemberMsg?._id && <div className="alert alert-info">You are in the {currentRoom} room</div>}
                {user && privateMemberMsg?._id && (
                    <div className="alert alert-info conversation-info">
                        <div>
                            Your conversation with {privateMemberMsg.name} <img src={privateMemberMsg.picture} className="conversation-profile-pic" />
                        </div>
                    </div>
                )}
                {!user && <div className="alert alert-danger">Please login</div>}
                {user &&
                    messages.map(({ _id: date, messagesByDate }, idx) => (
                        <div key={idx}>
                            <p className="alert alert-info text-center message-date-indicator">{date}</p>
                            {messagesByDate?.map(({ content, time, from: sender, type }, msgIdx) => (
                                <div className={sender?.email === user?.email ? "message" : "incoming-message"} key={msgIdx}>
                                    <div className="message-inner">
                                        <div className="d-flex align-items-center mb-3">
                                            <img src={sender.picture} style={{ width: 35, height: 35, objectFit: "cover", borderRadius: "50%", marginRight: 10 }} />
                                            <p className="message-sender">{sender._id === user?._id ? "You" : sender.name}</p>
                                        </div>
                                        {type?.startsWith("image/") ? (
                                            <img src={content} className="message-content" style={{ maxWidth: "200px", borderRadius: "10px" }} />
                                        ) : type?.startsWith("application/") ? (
                                            <a href={content} download className="message-content">
                                                {content.split("/").pop()}
                                            </a>
                                        ) : (
                                            <p className="message-content">{content}</p>
                                        )}
                                        <p className="message-timestamp-left">{time}</p>
                                    </div>
                                </div>
                            ))}
                        </div>
                    ))}
                <div ref={messageEndRef} />
            </div>
            <Form onSubmit={handleSubmit}>
                <Row>
                    <Col md={10}>
                        <Form.Group>
                            <Form.Control
                                type="text"
                                placeholder=""
                                disabled={!user}
                                value={message}
                                onChange={(e) => setMessage(e.target.value)}
                            />
                        </Form.Group>
                    </Col>
                    <Col md={1}>
                        <DropdownButton title="+" id="dropdown-basic-button">
                            <Dropdown.Item>
                                <FileBase
                                    type="file"
                                    multiple={false}
                                    onDone={handleFileUpload}
                                />
                            </Dropdown.Item>
                            <Dropdown.Item onClick={() => setShowEmojiPicker(!showEmojiPicker)}>
                                Emoticons
                            </Dropdown.Item>
                        </DropdownButton>
                    </Col>
                    <Col md={1}>
                        <Button variant="primary" type="submit" style={{ width: "100%", backgroundColor: "orange" }} disabled={!user}>
                            <i className="fas fa-paper-plane"></i>
                        </Button>
                    </Col>
                </Row>
            </Form>
            {showEmojiPicker && <Picker onEmojiClick={handleEmojiClick} />}
        </>
    );
}

export default MessageForm;
